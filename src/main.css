import * as React from 'react';
import { CommandBar, IButtonProps } from '@fluentui/react/lib/CommandBar';
import { IButtonProps } from '@fluentui/react/lib/Button';

interface IIndividualCommandBarButtonAsExampleProps {
  onDismissCoachmark: () => void;
  isCoachmarkVisible: boolean;
}

interface IIndividualCommandBarButtonAsExampleState {
  isCoachmarkVisible: boolean;
}

class IndividualCommandBarButtonAsExampleWrapper extends React.Component<IIndividualCommandBarButtonAsExampleProps, IIndividualCommandBarButtonAsExampleState> {
  constructor(props: IIndividualCommandBarButtonAsExampleProps) {
    super(props);

    this.state = {
      isCoachmarkVisible: true,
    };

    this.onDismissCoachmark = this.onDismissCoachmark.bind(this);
  }

  onDismissCoachmark() {
    this.setState({ isCoachmarkVisible: false });
  }

  render() {
    const overflowButtonProps: IButtonProps = {
      ariaLabel: 'More commands',
    };

    const items = [
      { key: 'newItem', text: 'New Version', iconProps: { iconName: 'Add' }, onClick: () => console.log('New Version') },
      { key: 'freeze', text: 'Freeze', iconProps: { iconName: 'Lock' }, onClick: () => console.log('Upload') },
      { key: 'save', text: 'Save', iconProps: { iconName: 'Save' }, onClick: () => console.log('Upload') },
      { key: 'cancel', text: 'Cancel', iconProps: { iconName: 'Cancel' }, onClick: () => console.log('Upload') },
    ];

    return (
      <CommandBar
        overflowButtonProps={overflowButtonProps}
        items={items}
      />
    );
  }
}

export default IndividualCommandBarButtonAsExampleWrapper;
.main{
    color: green;
    font-size: 45px;
}
