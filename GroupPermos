import { spfi } from "@pnp/sp";
import "@pnp/sp/webs";
import "@pnp/sp/lists";
import "@pnp/sp/security/list";
import "@pnp/sp/site-users/web";
import "@pnp/sp/site-groups/web";
import "@pnp/sp/role-definitions";
import { PermissionKind } from "@pnp/sp/security";

// Initialize the SP context (adjust based on your environment)
const sp = spfi(...);

export async function setItemPermissionsForSiteGroups(
    listName: string, // Name of the SharePoint list containing the items
    itemId: number // ID of the SharePoint item
): Promise<void> {
    try {
        // Get the list by title and item by ID
        const list = sp.web.lists.getByTitle(listName);
        const item = list.items.getById(itemId);

        // Break role inheritance (remove existing permissions, keep the item unique)
        await item.breakRoleInheritance(false, true);
        console.log(`Permissions inheritance broken for item ${itemId}.`);

        // Fetch site-level groups
        const groups = await sp.web.siteGroups();

        // Get the read role definition
        const readRoleDefinition = await sp.web.roleDefinitions.getByName("Read")();

        // Loop through each group
        for (const group of groups) {
            try {
                console.log(`Group ${group.Title} retrieved successfully.`);

                // Grant read access to each site-level group
                await item.roleAssignments.add(group.Id, readRoleDefinition.Id);
                console.log(`Read access granted to group ${group.Title} for item ${itemId}.`);
            } catch (error) {
                console.error(`Error setting permissions for group ${group.Title}:`, error);
            }
        }
    } catch (error) {
        console.error(`Error setting permissions for item ${itemId}:`, error);
    }
}
