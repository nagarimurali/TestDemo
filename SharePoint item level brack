import { sp } from "@pnp/sp/presets/all";

export default class SharePointService {

    // Method to break inheritance, remove all permissions, and grant read access to site-level groups
    public async setItemPermissionsForSiteGroups(
        listName: string,  // Name of the SharePoint list containing the items
        itemId: number,    // ID of the SharePoint item
    ): Promise<void> {
        try {
            const item = await sp.web.lists.getByTitle(listName).items.getById(itemId);

            // Break role inheritance (remove existing permissions, keep the item unique)
            await item.breakRoleInheritance(false, true);

            console.log(`Permissions inheritance broken for item ${itemId}.`);

            // Fetch site-level groups
            const groups = await sp.web.siteGroups();

            for (const group of groups) {
                try {
                    console.log(`Group ${group.Title} retrieved successfully.`);

                    // Grant read access to each site-level group
                    await item.roleAssignments.add(group.Id, sp.web.roleDefinitions.getByName("Read").Id);
                    console.log(`Read access granted to group ${group.Title} for item ${itemId}.`);
                } catch (error) {
                    console.error(`Error setting permissions for group ${group.Title}:`, error);
                }
            }

        } catch (error) {
            console.error(`Error setting permissions for item ${itemId}:`, error);
        }
    }
}
      await sharePointService.setItemPermissionsForSiteGroups(listName, itemId);
