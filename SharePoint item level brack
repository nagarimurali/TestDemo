public async setBasliFrozenPermission(
    listName: string,
    itemId: number,
    groupNamesToRemove: string[],
    groupNameToGrant: string
): Promise<void> {
    try {
        const item = await this.sp.web.lists.getByTitle(listName).items.getById(itemId);

        // Break role inheritance (remove existing permissions, keep the item unique)
        await item.breakRoleInheritance(false, true);

        console.log(`Permissions inheritance broken for item ${itemId}.`);

        // Remove specific group permissions
        for (const groupName of groupNamesToRemove) {
            try {
                const group = await this.sp.web.siteGroups.getByName(groupName);

                // Get role assignments for the item
                const roleAssignments = await item.roleAssignments.get();

                for (const roleAssignment of roleAssignments) {
                    if (roleAssignment.PrincipalId === group.Id) {
                        // Remove each role assigned to the group
                        await item.roleAssignments.remove(roleAssignment.PrincipalId, roleAssignment.RoleDefId);
                        console.log(`Removed permissions for group: ${groupName}`);
                    }
                }
            } catch (error) {
                console.error(`Error removing permissions for group ${groupName}:`, error);
            }
        }

        // Get the target SharePoint group by name
        const groupToGrant = await this.sp.web.siteGroups.getByName(groupNameToGrant);
        console.log(`Group ${groupNameToGrant} retrieved successfully.`);

        // Grant read access to the target group
        await item.roleAssignments.add(groupToGrant.Id, this.sp.web.roleDefinitions.getByName("Read").Id);
        console.log(`Read access granted to group ${groupNameToGrant} for item ${itemId}.`);

    } catch (error) {
        console.error(`Error setting permissions for item ${itemId}:`, error);
    }
}
